const assert = require("chai").assert;
const tinySVG = require("../src/tinysvg");

describe('tinySVG', () => {
    it("Should have imported sucessfully", () => {
        assert.exists(tinySVG.conversionMethods);
        assert.isNotEmpty(tinySVG.conversionMethods);
        assert.exists(tinySVG.parseMethods);
        assert.isNotEmpty(tinySVG.parseMethods);
    })

    it("Should parse an SVG tag with one path group (no attributes)", () => {
        let result = tinySVG.toTinySVG("<svg><path></path></svg>");
        assert.lengthOf(result, 5);
        assert.isString(result[0]);
        assert.isNumber(result[1]);
        assert.equal(result[1], 1); //should be one path group
    })

    it("Should parse an SVG and the path element should have properties", () => {
        let result = tinySVG.toTinySVG("<svg><path d='test'></path></svg>");
        assert.lengthOf(result, 5);
        assert.isString(result[0]);
        assert.isNumber(result[1]);
        assert.equal(result[1], 1); //should be one path group

        //check that the tag is not empty && exists
        assert.exists(result[4][1]);
        assert.isNotEmpty(result[4][1]);
        //check it has the d key, implicit transform and style key
        assert.hasAllKeys(result[4][1].properties, [
            "d",
            "transform",
            "style"
        ]);
    })

    it("Should parse a selection of valid SVG tags within groups", () => {
        let result = tinySVG.toTinySVG("<svg><path id='one'></path><g id='two'><path id='three'></path><path id='four'></path><circle></circle><rect></rect></g></svg>");
        assert.lengthOf(result, 5);
        assert.isString(result[0]);
        assert.isNumber(result[1]);
        assert.equal(result[1], 5); //should be three path group

        let circleFlag = false;
        let rectFlag = false;
        let pathCount = 0;

        Object.values(result[4]).forEach((value) => {
            switch (value.tag) {
                case "c":
                    circleFlag = true;
                    break;
                case "r":
                    rectFlag = true;
                    break;
                case "p":
                    pathCount++;
                    break;
            }
        })

        assert.equal(circleFlag, true);
        assert.equal(rectFlag, true);
        assert.equal(pathCount, 3);
    });

    it("Should parse colours from fill & style property succesfully", () => {
        let result = tinySVG.toTinySVG("<svg><path id='one' style='fill:#ff'></path><g id='two'><path id='three'></path><path id='four' fill='#f0f'></path></g></svg>");
        assert.lengthOf(result, 5);
        assert.isString(result[0]);
        assert.isNumber(result[1]);
        assert.equal(result[1], 3); //should be three path group

        assert.isNotEmpty(result[2]);
        assert.includeMembers(result[2], ['none', 3855, 255]) //3855 = #f0f 255 = #ff
    });

    it("Should ignore invalid tags", () => {
        let result = tinySVG.toTinySVG("<svg><invalid></invalid><falseTag></falseTag></svg>");
        assert.lengthOf(result, 5);
        assert.isString(result[0]);
        assert.isNumber(result[1]);
        assert.equal(result[1], 0); //should be no path group

        let [svg] = tinySVG.toSVG(result[0]);
        assert.isString(svg);
    })


    it("Should parse this", () => {
        let result = tinySVG.toSVG("/h[viewbox$0%200%201066.6667%201066.6667|start]&defs[id$defs3110|start]&cp[d$*|start]&p[d$M%200,800%20H%20800%20V%200%20H%200%20Z|transform$*|style$*]&cp[end]&defs[end]&g[transform$matrix(1.3333333,0,0,-1.3333333,0,1066.6667)|id$g3112|start]&g[transform$*|id$g3114|start]&g[transform$*|id$g3116|start]&p[d$m%20523.777,590.277%20c%201.678,-0.418%203.352,-0.848%205.024,-1.297%2025.892,-6.938%2051.299,-17.655%2074.64,-32.987%2024.903,-16.36%2018.981,-40.876%20-11.671,-31.38%20-9.338,2.894%20-18.707,5.462%20-28.18,7.686%20l%2016.828,-15.926%20c%2030.682,-29.036%2052.434,-63.859%2062.82,-101.441%209.977,-36.1%209.477,-74.718%20-3.644,-113.183%20-3.399,-9.965%20-4.848,-19.553%20-4.143,-28.929%200.703,-9.338%203.551,-18.535%208.742,-27.763%20l%2036.539,-64.915%20c%202.188,-3.883%202.877,-8.216%202.186,-12.321%20-1.463,-8.663%20-8.955,-15.296%20-17.732,-15.684%20-4.18,-0.186%20-8.405,1.029%20-11.991,3.675%20l%20-8.718,6.43%20c%20-19.903,14.68%20-40.034,26.011%20-61.288,34.345%20-21.257,8.336%20-43.718,13.708%20-68.277,16.469%20l%20-28.808,3.235%20c%20-9.022,1.015%20-15.965,8.212%20-16.645,17.266%20-0.682,9.066%205.107,17.209%2013.887,19.562%20l%2072.892,19.534%20c%2014.487,3.881%2023.569,17.789%2021.33,32.616%20l%20-2.927,19.382%20c%20-3.903,25.843%20-16.995,46.561%20-38.692,61.143%20-19.56,13.143%20-41.506,18.126%20-64.775,14.086%20-22.602,-3.924%20-45.106,-3.982%20-66.117,1.128%20-19.291,4.689%20-37.268,13.703%20-52.858,28.027%20l%20-4.708,4.324%20c%20-8.565,-6.191%20-15.729,-12.497%20-22.128,-19.389%20-7.26,-7.819%20-13.588,-16.438%20-19.893,-26.532%20-5.104,-8.166%20-13.887,-12.888%20-23.42,-9.925%20-9.255,2.876%20-14.865,11.798%20-14.868,21.315%20-0.006,18.493%200.962,36.193%203.343,52.734%202.208,15.328%205.637,29.668%2010.635,42.738%20l%20-12.448,11.435%20c%20-39.383,36.183%20-47.189,56.256%20-59.717,88.487%20-4.161,10.699%20-8.198,20.723%20-13.104,31.094%20-13.817,29.208%20-43.557,92.073%20-24.863,111.148%2010.877,11.101%2035.089,12.744%2059.12,11.04%2019.597,-1.387%2038.996,-4.751%2058.197,-8.816%2038.589,-8.175%2073.649,-15.603%20102.9,-43.287%20l%207.706,-7.294%20c%209.182,15.091%2023.604,27.438%2039.629,36.892%2022.59,13.329%2048.553,20.992%2067.313,22.459%2015.162,1.187%2028.259,-11.59%2025.601,-26.959%20l%20-11.289,-65.225%20c%20-2.478,-14.331%20-2.98,-27.95%20-1.445,-41.32%200.978,-8.564%202.738,-16.27%205.017,-23.677|transform$*|style$fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20289.453,486.68%20c%20-3.929,-11.233%20-6.72,-23.492%20-8.603,-36.571%20-2.304,-15.998%20-3.241,-33.214%20-3.233,-51.272%2010e-4,-4.93%202.609,-9.851%207.508,-11.374%204.885,-1.518%208.993,1.457%2011.511,5.488%206.661,10.664%2013.37,19.793%2021.096,28.116%206.446,6.944%2013.568,13.3%2021.926,19.488%20l%20-25.663,23.577%20z|transform$*|style$fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20289.453,486.68%20c%20-3.929,-11.233%20-6.72,-23.492%20-8.603,-36.571%20-2.304,-15.998%20-3.241,-33.214%20-3.233,-51.272%2010e-4,-4.93%202.609,-9.851%207.508,-11.374%204.885,-1.518%208.993,1.457%2011.511,5.488%20-16.345,46.586%20-13.878,73.985%20-7.183,93.729|transform$*|style$fill:#cccccc;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20496.594,595.702%20c%205.17,-0.788%2010.344,-1.711%2015.511,-2.774%20-1.695,6.58%20-2.921,13.176%20-3.685,19.837%20-1.645,14.348%20-1.111,28.934%201.539,44.261%20l%2011.289,65.225%20c%201.492,8.646%20-6.123,15.47%20-14.529,14.813%20-17.446,-1.363%20-41.674,-8.541%20-62.864,-21.044%20-15.376,-9.07%20-29.058,-20.903%20-37.146,-35.254%20z|transform$*|style$fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20519.268,710.814%201.98,11.437%20c%201.492,8.646%20-6.123,15.47%20-14.529,14.813%20-17.446,-1.363%20-41.674,-8.541%20-62.864,-21.044%20-15.376,-9.07%20-29.058,-20.903%20-37.146,-35.254%20l%201.527,-1.445%20c%2016.012,-4.726%2037.594,-4.01%2060.551,3.254%2019.967,6.316%2037.559,16.505%2050.481,28.239|transform$*|style$fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20629.727,305.086%20c%2012.418,36.396%2012.89,72.935%203.451,107.089%20-9.883,35.752%20-30.625,68.927%20-59.91,96.642%20l%20-29.071,27.513%20c%20-7.789,1.409%20-15.677,2.583%20-23.707,3.511%20-24.691,2.854%20-50.672,3.371%20-79.058,1.223%20-16.858,-1.275%20-28.496,11.54%20-29.184,27.53%20-0.768,17.865%2011.818,30.364%2029.877,30.69%2012.113,0.219%2024.525,-0.224%2037.057,-1.426%20l%20-44.121,41.755%20-50.968,48.232%20c%20-27.123,25.671%20-60.81,32.807%20-97.883,40.662%20-18.741,3.969%20-37.675,7.259%20-56.802,8.615%20-21.466,1.521%20-42.674,0.475%20-50.927,-7.946%20-13.615,-13.894%2014.01,-72.292%2026.845,-99.424%205.007,-10.582%209.125,-20.839%2013.37,-31.755%2011.987,-30.837%2019.452,-50.041%2057.066,-84.598%20l%2083.488,-76.701%20c%2014.238,-13.081%2030.646,-21.31%2048.24,-25.588%2019.551,-4.754%2040.639,-4.672%2061.928,-0.977%2026.002,4.514%2050.465,-1.023%2072.322,-15.71%2024.153,-16.23%2038.879,-39.435%2043.223,-68.212%20l%202.93,-19.383%20c%203.023,-20.033%20-9.413,-39.006%20-28.979,-44.248%20l%20-72.893,-19.534%20c%20-3.947,-1.058%20-6.47,-4.629%20-6.162,-8.701%200.305,-4.086%203.329,-7.234%207.403,-7.691%20l%2028.808,-3.235%20c%2025.446,-2.861%2048.78,-8.451%2070.936,-17.14%2022.164,-8.69%2043.076,-20.447%2063.668,-35.635%20l%208.719,-6.432%20c%201.623,-1.198%203.502,-1.75%205.336,-1.667%203.902,0.173%207.259,3.131%207.908,6.983%200.308,1.829%20-0.006,3.774%20-0.994,5.529%20l%20-36.539,64.916%20c%20-5.963,10.592%20-9.237,21.218%20-10.053,32.059%20-0.813,10.806%200.824,21.759%204.676,33.054|transform$*|style$fill:#cccccc;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20447.225,541.468%20c%20-1.92,-0.122%20-3.85,-0.256%20-5.793,-0.404%20-16.858,-1.275%20-28.496,11.54%20-29.184,27.53%20-0.059,1.373%20-0.039,2.715%200.057,4.022%20l%20-110.61,98.664%20c%20-53.971,48.142%20-126.626,35.044%20-108.77,-14.492%204.476,-10.283%208.969,-19.778%2012.401,-27.036%205.007,-10.582%209.125,-20.839%2013.37,-31.755%2011.987,-30.837%2019.452,-50.041%2057.066,-84.598%20l%2083.488,-76.701%20c%2014.238,-13.081%2030.646,-21.31%2048.24,-25.588%2019.551,-4.754%2040.639,-4.672%2061.928,-0.977%2026.002,4.514%2050.465,-1.023%2072.322,-15.71%2024.153,-16.23%2038.879,-39.435%2043.223,-68.212%20l%202.93,-19.383%20c%200.365,-2.43%200.502,-4.842%200.431,-7.217%2043.028,29.76%2019.588,98.522%20-52.988,163.26%20z|transform$*|style$fill:#e6e6e6;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20432.492,597.83%20c%202.979,0.891%206.205,1.393%209.633,1.454%2012.113,0.219%2024.525,-0.224%2037.057,-1.426%20l%20-44.121,41.755%20-50.968,48.232%20c%20-27.123,25.671%20-60.81,32.807%20-97.883,40.662%20-18.741,3.969%20-37.675,7.259%20-56.802,8.615%20-6.324,0.448%20-12.628,0.673%20-18.583,0.552%2046.907,-4.633%2092.57,-13.098%20131.863,-52.938%2029.219,-29.625%2059.47,-58.305%2089.804,-86.906%20M%20629.727,305.086%20c%2012.418,36.396%2012.89,72.935%203.451,107.089%20-9.883,35.752%20-30.625,68.927%20-59.91,96.642%20l%20-29.071,27.513%20c%20-7.789,1.409%20-15.677,2.583%20-23.707,3.511%20-9.508,1.099%20-19.207,1.851%20-29.162,2.239%2043.891,-42.157%2086.651,-85.337%20125.326,-132.228%2025.186,-30.539%2015.264,-74.607%2010.696,-112.804%200.664,2.662%201.459,5.34%202.377,8.038|transform$*|style$fill:#808080;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20440.645,551.464%20c%2029.099,2.203%2055.734,1.671%2081.044,-1.255%2025.295,-2.924%2049.301,-8.252%2073.155,-15.645%2020.427,-6.328%2015.535,4.43%202.898,12.73%20-22.346,14.68%20-46.732,24.956%20-71.627,31.628%20-28.027,7.51%20-56.674,10.449%20-83.781,9.958%20-11.963,-0.216%20-20.191,-7.883%20-19.678,-19.829%200.43,-10.003%207.248,-18.4%2017.989,-17.587|transform$*|style$fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20440.645,551.464%20c%2029.099,2.203%2055.734,1.671%2081.044,-1.255%2025.295,-2.924%2049.301,-8.252%2073.155,-15.645%209.197,-2.848%2013.26,-2.233%2013.795,0.061%20l%200.017,0.069%200.004,0.034%20c%20-52.849,29.129%20-116.43,37.521%20-186.004,34.323%200.43,-10.003%207.248,-18.4%2017.989,-17.587|transform$*|style$fill:#cccccc;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20342.541,703.846%20c%207.119,-4.858%2010.363,-12.502%207.245,-17.074%20-3.119,-4.572%20-11.421,-4.338%20-18.539,0.519%20-7.121,4.859%20-10.364,12.502%20-7.245,17.073%203.119,4.572%2011.42,4.34%2018.539,-0.518|transform$*|style$fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20341.46,703.205%20c%203.155,-2.153%204.591,-5.54%203.21,-7.566%20-1.381,-2.026%20-5.061,-1.924%20-8.215,0.229%20-3.157,2.154%20-4.593,5.541%20-3.212,7.568%201.382,2.024%205.062,1.922%208.217,-0.231|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20315.045,630.459%20c%206.466,-2.224%203.086,-12.057%20-3.381,-9.832%20-16.863,5.806%20-50.45,13.702%20-67.074,3.789%20-9.985,-5.953%20-9.15,-17.035%20-6.181,-26.752%201.995,-6.562%20-7.984,-9.595%20-9.976,-3.032%20-4.484,14.664%20-3.705,30.04%2010.848,38.717%2020.032,11.945%2055.304,4.158%2075.764,-2.89|transform$*|style$fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20408.352,624.721%20c%201.382,-9.215%200.205,-17.371%20-3.206,-24.601%20-3.443,-7.302%20-9.215,-13.767%20-16.966,-19.516%20-1.734,-1.287%20-2.097,-3.74%20-0.811,-5.476%201.286,-1.735%203.739,-2.099%205.474,-0.812%208.751,6.492%2015.333,13.93%2019.364,22.478%204.066,8.62%205.482,18.268%203.857,29.092%20-0.322,2.13%20-2.31,3.596%20-4.439,3.274%20-2.129,-0.321%20-3.598,-2.308%20-3.273,-4.439%20m%20-14.849,15.359%20c%201.655,-11.004%200.242,-20.749%20-3.834,-29.393%20-4.111,-8.718%20-10.985,-16.424%20-20.208,-23.267%20-1.736,-1.287%20-2.101,-3.738%20-0.813,-5.475%201.288,-1.736%203.739,-2.099%205.475,-0.812%2010.224,7.585%2017.91,16.265%2022.607,26.226%204.731,10.036%206.381,21.273%204.485,33.887%20-0.32,2.129%20-2.307,3.596%20-4.436,3.274%20-2.132,-0.322%20-3.596,-2.31%20-3.276,-4.44%20m%20-15.988,16.158%20c%20-0.324,2.13%201.144,4.118%203.273,4.44%202.129,0.321%204.117,-1.145%204.439,-3.275%202.068,-13.773%200.268,-26.042%20-4.895,-36.996%20-5.132,-10.88%20-13.533,-20.365%20-24.712,-28.659%20-1.736,-1.286%20-4.189,-0.923%20-5.475,0.813%20-1.288,1.736%20-0.925,4.189%200.813,5.475%2010.177,7.551%2017.767,16.062%2022.312,25.697%204.509,9.564%206.07,20.34%204.245,32.505|transform$*|style$fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20436.338,691.746%20c%20-2.219,-1.827%20-5.498,-1.509%20-7.324,0.709%20-1.828,2.218%20-1.512,5.499%200.709,7.325%207.652,6.336%2015.804,11.94%2024.617,16.561%208.869,4.652%2018.334,8.276%2028.547,10.612%202.806,0.64%205.601,-1.117%206.242,-3.925%200.641,-2.807%20-1.117,-5.604%20-3.926,-6.243%20-9.381,-2.146%20-18.014,-5.442%20-26.049,-9.656%20-8.091,-4.244%20-15.654,-9.453%20-22.816,-15.383|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20496.781,731.895%20c%203.092,0.467%205.979,-1.662%206.446,-4.754%200.466,-3.093%20-1.663,-5.978%20-4.756,-6.445%20-3.09,-0.468%20-5.977,1.66%20-6.446,4.753%20-0.464,3.093%201.663,5.978%204.756,6.446|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20387.795,661.022%20c%20-2.108,1.96%20-2.226,5.257%20-0.266,7.364%201.96,2.108%205.255,2.227%207.363,0.266%20l%2042.264,-39.16%20c%202.108,-1.96%202.227,-5.258%200.268,-7.365%20-1.961,-2.106%20-5.258,-2.226%20-7.363,-0.266%20z|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20449.182,617.929%20c%201.384,-2.805%200.234,-6.201%20-2.571,-7.586%20-2.802,-1.385%20-6.199,-0.234%20-7.584,2.57%20-1.386,2.805%20-0.236,6.201%202.571,7.586%202.802,1.386%206.199,0.234%207.584,-2.57|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20477.484,564.138%20c%20-2.88,-0.002%20-5.218,2.331%20-5.22,5.213%20-0.004,2.881%202.33,5.218%205.213,5.222%2010.035,-0.011%2019.97,-0.659%2029.798,-1.959%209.766,-1.293%2019.34,-3.234%2028.707,-5.838%202.77,-0.766%204.395,-3.635%203.629,-6.404%20-0.767,-2.768%20-3.632,-4.393%20-6.402,-3.627%20-8.93,2.483%20-18.033,4.328%20-27.305,5.556%20-9.213,1.219%20-18.689,1.825%20-28.42,1.837|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20551.787,564.42%20c%202.75,-1.492%203.77,-4.929%202.277,-7.678%20-1.492,-2.75%20-4.929,-3.77%20-7.679,-2.279%20-2.748,1.491%20-3.77,4.928%20-2.278,7.678%201.493,2.75%204.93,3.77%207.68,2.279|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20251.858,723.342%20c%202.667,-1.066%203.964,-4.093%202.898,-6.76%20-1.065,-2.666%20-4.094,-3.964%20-6.759,-2.898%20-13.125,5.244%20-29.884,8.032%20-42.315,7.066%20-4.54,-0.353%20-8.349,-1.185%20-10.95,-2.562%20-1.678,-0.888%20-2.71,-1.967%20-2.82,-3.23%20-0.097,-1.116%200.288,-2.584%201.247,-4.444%201.307,-2.559%200.295,-5.695%20-2.265,-7.004%20-2.557,-1.308%20-5.694,-0.295%20-7.003,2.262%20-1.894,3.679%20-2.613,7.043%20-2.346,10.096%200.452,5.176%203.486,8.963%208.333,11.528%203.926,2.079%209.106,3.292%2014.976,3.748%2013.87,1.078%2032.488,-2.001%2047.004,-7.802|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20198.178,690.888%20c%20-2.921,-1.119%20-6.196,0.341%20-7.314,3.262%20-1.121,2.92%200.342,6.196%203.262,7.314%202.923,1.119%206.196,-0.341%207.315,-3.262%201.119,-2.921%20-0.342,-6.196%20-3.263,-7.314|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20288.134,460.745%20c%200.673,2.79%203.48,4.507%206.268,3.834%202.791,-0.672%204.507,-3.478%203.834,-6.267%20-1.528,-6.306%20-2.762,-12.646%20-3.694,-19.016%20-0.904,-6.206%20-1.518,-12.557%20-1.831,-19.047%20-0.133,-2.879%20-2.577,-5.103%20-5.456,-4.969%20-2.88,0.133%20-5.105,2.577%20-4.969,5.457%200.314,6.566%200.972,13.254%201.965,20.058%200.971,6.639%202.266,13.291%203.883,19.95|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20279.579,405.005%20c%200.554,-3.078%203.496,-5.125%206.575,-4.571%203.079,0.551%205.126,3.496%204.572,6.574%20-0.552,3.078%20-3.497,5.126%20-6.576,4.573%20-3.077,-0.554%20-5.125,-3.498%20-4.571,-6.576|transform$*|style$fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none]&p[d$m%20423.441,68.702%20c%20127.567,0%20231.61,14.892%20231.61,33.151%200,18.257%20-104.043,33.149%20-231.61,33.149%20-127.564,0%20-231.61,-14.892%20-231.61,-33.149%200,-18.259%20104.046,-33.151%20231.61,-33.151|transform$*|style$fill:#e6e6e6;fill-opacity:1;fill-rule:evenodd;stroke:none]&g[end]&g[end]&g[end]&h[end]")
        assert.lengthOf(result,3);
        assert.isString(result[0]);
    });

    it("Should decompress a compressed tinySVG string and turn it into SVG", () => {
        let result = tinySVG.toTinySVG("<svg><path id='one' style='fill:#ff'></path><g id='two'><path id='three'></path><path id='four' fill='#f0f'></path></g></svg>");
        assert.lengthOf(result, 5);
        assert.isString(result[0]);
        assert.isNumber(result[1]);
        assert.equal(result[1], 3); //should be three path group

        let decresult = tinySVG.decompress(result[3]);
        assert.isString(decresult);

        result = tinySVG.toSVG(decresult);
        assert.lengthOf(result,3);
        assert.isString(result[0]);
    })
})